# -*- coding: utf-8 -*-
"""
YOLOv8 ile X-ray Bagaj Anomali Tespiti EÄŸitimi
@author: emrek (ve Gemini)
"""

from ultralytics import YOLO
import torch
import os
import yaml # YAML dosyasÄ±nÄ± kontrol etmek iÃ§in (isteÄŸe baÄŸlÄ± ama faydalÄ±)
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image

def tren_yolo_modeli():
    """
    YOLOv8 modelini X-ray bagaj veri kÃ¼mesiyle eÄŸitir.
    """
    print("YOLOv8 X-ray Anomali Tespiti EÄŸitimi BaÅŸlatÄ±lÄ±yor...")

    # 1. CihazÄ± Belirle (GPU varsa GPU, yoksa CPU)
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    print(f"KullanÄ±lacak Cihaz: {device}")
    if device == 'cpu':
        print("UYARI: CPU Ã¼zerinde eÄŸitim Ã§ok daha yavaÅŸ olacaktÄ±r. MÃ¼mkÃ¼nse GPU kullanÄ±n.")

    # 2. data.yaml DosyasÄ±nÄ±n Yolu
    # Bu YAML dosyasÄ±nÄ±n, Python script'inizin Ã§alÄ±ÅŸtÄ±ÄŸÄ± dizine gÃ¶re
    # doÄŸru bir yolda olduÄŸundan emin olun.
    # EÄŸer script ile aynÄ± dizindeyse: data_yaml_path = 'xray_data.yaml' (veya verdiÄŸiniz isim)
    # Ã–nceki mesajÄ±nÄ±zdaki iÃ§eriÄŸe gÃ¶re dosya adÄ±nÄ± 'xray_data.yaml' varsayÄ±yorum.
    data_yaml_path = 'data.yaml' # LÃœTFEN BU YOLU KONTROL EDÄ°N VE GEREKÄ°RSE GÃœNCELLEYÄ°N!

    # YAML dosyasÄ±nÄ±n varlÄ±ÄŸÄ±nÄ± ve temel iÃ§eriÄŸini kontrol edelim
    if not os.path.exists(data_yaml_path):
        print(f"HATA: '{data_yaml_path}' bulunamadÄ±!")
        print("LÃ¼tfen YAML dosyasÄ±nÄ±n doÄŸru yolda olduÄŸundan ve adÄ±nÄ±n doÄŸru yazÄ±ldÄ±ÄŸÄ±ndan emin olun.")
        return
    
    try:
        with open(data_yaml_path, 'r', encoding='utf-8') as f: # encoding eklendi
            data_config = yaml.safe_load(f)
            print("\n--- YÃ¼klenen data.yaml Ä°Ã§eriÄŸi ---")
            print(f"EÄŸitim GÃ¶rÃ¼ntÃ¼leri Yolu: {data_config.get('train')}")
            print(f"DoÄŸrulama GÃ¶rÃ¼ntÃ¼leri Yolu: {data_config.get('val')}")
            print(f"Test GÃ¶rÃ¼ntÃ¼leri Yolu (varsa): {data_config.get('test')}")
            print(f"SÄ±nÄ±f SayÄ±sÄ± (nc): {data_config.get('nc')}")
            print(f"SÄ±nÄ±f Ä°simleri (names): {data_config.get('names')}")
            print("---------------------------------\n")
            if not data_config.get('train') or not data_config.get('val'):
                print("HATA: YAML dosyasÄ±nda 'train' veya 'val' yollarÄ± eksik!")
                return
            if data_config.get('nc') != len(data_config.get('names')):
                print("UYARI: YAML'deki 'nc' ile 'names' listesinin uzunluÄŸu tutarsÄ±z!")
            if any(name.isdigit() for name in data_config.get('names')):
                print("UYARI: YAML dosyasÄ±ndaki sÄ±nÄ±f isimleri ('names') rakamlardan oluÅŸuyor.")
                print("AnlamlÄ± sonuÃ§lar iÃ§in bu isimleri 'gun', 'knife' gibi gerÃ§ek nesne isimleriyle gÃ¼ncellemeniz Ã¶nerilir.")

    except Exception as e:
        print(f"HATA: '{data_yaml_path}' dosyasÄ± okunurken bir sorun oluÅŸtu: {e}")
        return

    # 3. KullanÄ±lacak YOLO Modelini SeÃ§
    # FarklÄ± boyutlarda ve hÄ±zlarda modeller mevcuttur:
    # yolov8n.pt (nano - en hÄ±zlÄ±, en kÃ¼Ã§Ã¼k)
    # yolov8s.pt (small - iyi bir denge)
    # yolov8m.pt (medium)
    # yolov8l.pt (large)
    # yolov8x.pt (extra large - en yavaÅŸ, en yÃ¼ksek baÅŸarÄ±m potansiyeli)
    model_secimi = 'yolov8s.pt' # BaÅŸlangÄ±Ã§ iÃ§in 's' veya 'n' iyi bir seÃ§enektir.
    print(f"'{model_secimi}' modeli kullanÄ±lacak.")

    # 4. EÄŸitim Parametreleri
    EPOCHS = 100        # Toplam eÄŸitim turu (deneyerek artÄ±rÄ±labilir, Ã¶rn: 100, 200)
    BATCH_SIZE = 32    # Tek seferde iÅŸlenecek gÃ¶rÃ¼ntÃ¼ sayÄ±sÄ± (GPU belleÄŸinize gÃ¶re ayarlayÄ±n, Ã¶rn: 8, 16, 32)
                       # EÄŸer bellek hatasÄ± alÄ±rsanÄ±z bu deÄŸeri dÃ¼ÅŸÃ¼rÃ¼n.
    IMAGE_SIZE = 416   # GÃ¶rÃ¼ntÃ¼lerin yeniden boyutlandÄ±rÄ±lacaÄŸÄ± boyut (YAML'deki verilerle de iliÅŸkili olabilir)
                       # Modelin varsayÄ±lanÄ± genellikle 640'tÄ±r, ancak 416 da yaygÄ±ndÄ±r.
    PROJE_ADI = 'xray_nesne_tespiti2' # SonuÃ§larÄ±n kaydedileceÄŸi proje klasÃ¶rÃ¼
    DENEY_ADI = 'yolov8s_ilk_deney2' # Bu Ã¶zel eÄŸitim iÃ§in alt klasÃ¶r adÄ±

    # 5. YOLO Modelini YÃ¼kle
    # '.pt' dosyasÄ± hem modelin mimarisini hem de Ã¶nceden eÄŸitilmiÅŸ aÄŸÄ±rlÄ±klarÄ±nÄ± iÃ§erir.
    # Bu, transfer Ã¶ÄŸrenme yapmamÄ±zÄ± saÄŸlar.
    try:
        model = YOLO(model_secimi)
        print(f"'{model_secimi}' modeli baÅŸarÄ±yla yÃ¼klendi.")
    except Exception as e:
        print(f"HATA: YOLO modeli yÃ¼klenirken bir sorun oluÅŸtu: {e}")
        print("Ultralytics kÃ¼tÃ¼phanesinin doÄŸru kurulduÄŸundan ve model adÄ±nÄ±n doÄŸru olduÄŸundan emin olun.")
        return

    # 6. Modeli EÄŸit
    print("\nModel eÄŸitimi baÅŸlatÄ±lÄ±yor...")
    try:
        results = model.train(
            data=data_yaml_path,    # data.yaml dosyasÄ±nÄ±n yolu
            epochs=EPOCHS,
            batch=BATCH_SIZE,
            imgsz=IMAGE_SIZE,
            device=device,          # 'cuda' veya 'cpu'
            patience=25,            # Erken durdurma iÃ§in sabÄ±r (performans artmazsa 10 epoch sonra durur)
            project=PROJE_ADI,      # KayÄ±t dizini: runs/detect/PROJE_ADI
            name=DENEY_ADI,         # KayÄ±t dizini: runs/detect/PROJE_ADI/DENEY_ADI
            exist_ok=False          # EÄŸer aynÄ± isimde bir deney varsa Ã¼zerine yazma, hata ver (True yaparsanÄ±z Ã¼zerine yazar)
        )
        print("\nEÄŸitim tamamlandÄ±!")
        # En iyi modelin yolu genellikle results.save_dir + '/weights/best.pt' ÅŸeklinde olur.
        best_model_path = os.path.join(results.save_dir, 'weights', 'best.pt')
        print(f"âœ… En iyi model aÄŸÄ±rlÄ±klarÄ±: {best_model_path}")

        # EÄŸitim metriklerini grafik olarak gÃ¶ster (results.png)
        results_img_path = os.path.join(results.save_dir, 'results.png')
        if os.path.exists(results_img_path):
            print("ğŸ“Š EÄŸitim metrikleri gÃ¶rseli gÃ¶steriliyor...")
            img = Image.open(results_img_path)
            plt.imshow(img)
            plt.axis('off')
            plt.title("EÄŸitim Metrikleri")
            plt.show()
        else:
            print("results.png bulunamadÄ±!")

        # EÄŸitim istatistiklerini (CSV) gÃ¶ster
        csv_path = os.path.join(results.save_dir, 'results.csv')
        if os.path.exists(csv_path):
            df = pd.read_csv(csv_path)
            print("\nğŸ“ˆ EÄŸitim SonuÃ§larÄ± (Son Epoch):")
            print(df.tail(1)[['epoch', 'metrics/precision', 'metrics/recall', 'metrics/mAP_0.5', 'metrics/mAP_0.5:0.95']])
        else:
            print("results.csv bulunamadÄ±!")

    except Exception as e:
        print(f"EÄŸitim sÄ±rasÄ±nda bir hata oluÅŸtu: {e}")
        print("LÃ¼tfen YAML dosyasÄ±ndaki yollarÄ±n ve veri formatÄ±nÄ±n doÄŸru olduÄŸundan emin olun.")
        print("AyrÄ±ca GPU belleÄŸini ve CUDA/PyTorch kurulumunu kontrol edin.")

if __name__ == '__main__':
    # Bu satÄ±r, script doÄŸrudan Ã§alÄ±ÅŸtÄ±rÄ±ldÄ±ÄŸÄ±nda ana fonksiyonu Ã§aÄŸÄ±rÄ±r.
    tren_yolo_modeli()
